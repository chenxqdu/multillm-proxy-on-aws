# aws cloudformation create-stack --stack-name litellm-existing-vpc --template-body file://LiteLLM_ec2_existing_vpc.yaml --capabilities CAPABILITY_NAMED_IAM

AWSTemplateFormatVersion: '2010-09-09'
Description: Deploy an LiteLLM proxy service on AWS using existing VPC and subnets

Parameters:
  ExistingVPCId:
    Type: AWS::EC2::VPC::Id
    Description: ID of the existing VPC
  ExistingPublicSubnetId:
    Type: AWS::EC2::Subnet::Id
    Description: ID of the existing public subnet
  ContainerImage:
    Type: String
    Description: LiteLLM Proxy Image # to mount proxy configuration file
    Default: ghcr.io/berriai/litellm-database:main-stable
  LitellmFileS3Bucket:
    Type : String
    Description: Select the S3 bucket from your account where you have uploaded litellm configuration files
  ProxyFileS3Key:
    Type: String
    Description: Init container proxy configuration file located path in the selected s3 bucket
    Default: litellm/proxy_config.yaml
  DockerComposeFileS3Key:
    Type: String
    Description: Init container proxy configuration file located path in the selected s3 bucket
    Default: litellm/docker-compose.yml
  PromethusFileS3Key:
    Type: String
    Description: Init container proxy configuration file located path in the selected s3 bucket
    Default: litellm/prometheus.yml

Resources:
  # 创建安全组
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP traffic
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 9090
          ToPort: 9090
          CidrIp: 0.0.0.0/0
      VpcId: 
        Ref: ExistingVPCId

  # 创建 EC2 
  LiteLLMServer:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: "{{resolve:ssm:/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-6.1-arm64}}"
      InstanceType: m6g.medium
      IamInstanceProfile: 
        Ref: IamInstanceProfile
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 50
            VolumeType: gp3
      SecurityGroupIds:
        - Ref: SecurityGroup
      SubnetId: 
        Ref: ExistingPublicSubnetId
      UserData:
        Fn::Base64: 
          Fn::Sub: 
            - |
              #!/bin/bash
              yum update -y && yum install -y docker && systemctl start docker && systemctl enable docker && curl -L https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose && chmod +x /usr/local/bin/docker-compose
              aws s3 cp s3://${LitellmFileS3Bucket}/${ProxyFileS3Key} /home/ec2-user/proxy_config.yaml
              aws s3 cp s3://${LitellmFileS3Bucket}/${DockerComposeFileS3Key} /home/ec2-user/docker-compose.yml
              aws s3 cp s3://${LitellmFileS3Bucket}/${PromethusFileS3Key} /home/ec2-user/prometheus.yml
              docker-compose -f /home/ec2-user/docker-compose.yml up -d
            - {}
      Tags:
        - Key: Name
          Value: LiteLLM-Server
  
  ###################
  ## CW Resources ###
  ###################
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: 
        Fn::Join: 
          - '-'
          - - Fn::Sub: '${AWS::StackName}'
            - 'loggroup'
      RetentionInDays: 7

  ###################
  ## IAM Resources ##
  ###################
  IamInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - Ref: IamInstanceProfileRole

  IamInstanceProfileRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: 'Allow'
            Principal:
              Service:
                - 'ec2.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:        
        - Fn::Join:
            - ""
            - - "arn:"
              - Ref: AWS::Partition
              - :iam::aws:policy/AmazonSSMManagedInstanceCore

  S3Policies:
    Type: 'AWS::IAM::Policy'
    Properties:
      PolicyName: 's3access'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Action:
              - 's3:GetObject'
              - 's3:ListBucket'
            Resource:
              - Fn::Sub: 'arn:${AWS::Partition}:s3:::${LitellmFileS3Bucket}'
              - Fn::Sub: 'arn:${AWS::Partition}:s3:::${LitellmFileS3Bucket}/*'
      Roles:
        - Ref: 'IamInstanceProfileRole'

Outputs:
  LiteLLMServer:
    Description: The Public IP of the LiteLLMServer
    Value: 
      Fn::GetAtt: 
        - LiteLLMServer
        - PublicIp
